{"mappings":"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","sources":["src/js/Icons.ts","src/js/jstable.js","src/webpages/users-page/users-page.ts","src/js/appUtil.ts"],"sourcesContent":["/* Here is where we define an API for a custom set of icons from icomoon */\n\nexport function icon(name: string, cls = \"\"): string {\n  return `<i class=\"hf-${name} ${cls}\"></i>`\n}\n","/*!\n * JSTable v1.5.1\n */\n// import \"../css/jstable.scss\"\n\nconst JSTableDefaultConfig = {\n  perPage: 5,\n  perPageSelect: [5, 10, 15, 20, 25],\n\n  sortable: true,\n  searchable: true,\n\n  // Pagination\n  nextPrev: true,\n  firstLast: false,\n  prevText: \"&lsaquo;\",\n  nextText: \"&rsaquo;\",\n  firstText: \"&laquo;\",\n  lastText: \"&raquo;\",\n  ellipsisText: \"&hellip;\",\n  truncatePager: true,\n  pagerDelta: 2,\n\n  classes: {\n    top: \"dt-top\",\n    info: \"dt-info\",\n    input: \"dt-input\",\n    table: \"dt-table\",\n    bottom: \"dt-bottom\",\n    search: \"dt-search\",\n    sorter: \"dt-sorter\",\n    wrapper: \"dt-wrapper\",\n    dropdown: \"dt-dropdown\",\n    ellipsis: \"dt-ellipsis\",\n    selector: \"dt-selector\",\n    container: \"dt-container\",\n    pagination: \"dt-pagination\",\n    loading: \"dt-loading\",\n    message: \"dt-message\",\n  },\n\n  // Customise the display text\n  labels: {\n    placeholder: \"Search...\",\n    perPage: \"{select} entries per page\",\n    noRows: \"No entries found\",\n    info: \"Showing {start} to {end} of {rows} entries\",\n    loading: \"Loading...\",\n    infoFiltered:\n      \"Showing {start} to {end} of {rows} entries (filtered from {rowsTotal} entries)\",\n  },\n\n  // Customise the layout\n  layout: {\n    top: \"{select}{search}\",\n    bottom: \"{info}{pager}\",\n  },\n\n  // server side\n  serverSide: false,\n  // total count of elements\n  deferLoading: null,\n  // url for queries\n  ajax: null,\n  // additional params\n  ajaxParams: {},\n  // query params names\n  queryParams: {\n    page: \"page\",\n    search: \"search\",\n  },\n  // append query params on events\n  addQueryParams: true,\n\n  rowAttributesCreator: null,\n}\n\nexport class JSTable {\n  constructor(element, config = {}) {\n    let DOMElement = element\n    if (typeof element === \"string\") {\n      DOMElement = document.querySelector(element)\n    }\n    if (DOMElement === null) {\n      return\n    }\n\n    this.config = this._merge(JSTableDefaultConfig, config)\n    this.table = new JSTableElement(DOMElement)\n\n    // reset values\n    this.currentPage = 1\n    this.columnRenderers = []\n    this.columnsNotSearchable = []\n    this.searchQuery = null\n    this.sortColumn = null\n    this.sortDirection = \"asc\"\n    this.isSearching = false\n    this.filteredDataCount = null\n\n    // init pager\n    this.pager = new JSTablePager(this)\n\n    // build wrapper and layout\n    this._build()\n    this._buildColumns()\n\n    // update table content\n    this.update(!this.config.serverSide)\n\n    // bind events\n    this._bindEvents()\n\n    this._emit(\"init\")\n\n    this._parseQueryParams()\n  }\n\n  _build() {\n    var that = this\n    let options = this.config\n\n    this.wrapper = document.createElement(\"div\")\n    this.wrapper.className = options.classes.wrapper\n\n    var inner = [\n      \"<div class='\",\n      options.classes.top,\n      \"'>\",\n      options.layout.top,\n      \"</div>\",\n      \"<div class='\",\n      options.classes.container,\n      \"'>\",\n      \"<div class='\",\n      options.classes.loading,\n      \" hidden'>\",\n      options.labels.loading,\n      \"</div>\",\n      \"</div>\",\n      \"<div class='\",\n      options.classes.bottom,\n      \"'>\",\n      options.layout.bottom,\n      \"</div>\",\n    ].join(\"\")\n\n    // Info placement\n    inner = inner.replace(\n      \"{info}\",\n      \"<div class='\" + options.classes.info + \"'></div>\"\n    )\n\n    // Per Page Select\n    if (options.perPageSelect) {\n      var wrap = [\n        \"<div class='\",\n        options.classes.dropdown,\n        \"'>\",\n        \"<label>\",\n        options.labels.perPage,\n        \"</label>\",\n        \"</div>\",\n      ].join(\"\")\n\n      // Create the select\n      var select = document.createElement(\"select\")\n      select.className = options.classes.selector\n\n      // Create the options\n      options.perPageSelect.forEach(function (val) {\n        var selected = val === options.perPage\n        var option = new Option(val, val, selected, selected)\n        select.add(option)\n      })\n\n      // Custom label\n      wrap = wrap.replace(\"{select}\", select.outerHTML)\n\n      // Selector placement\n      inner = inner.replace(/\\{select\\}/g, wrap)\n    } else {\n      inner = inner.replace(/\\{select\\}/g, \"\")\n    }\n\n    // Searchable\n    if (options.searchable) {\n      var form = [\n        \"<div class='\",\n        options.classes.search,\n        \"'>\",\n        \"<input class='\",\n        options.classes.input,\n        \"' placeholder='\",\n        options.labels.placeholder,\n        \"' type='text'>\",\n        \"</div>\",\n      ].join(\"\")\n\n      // Search input placement\n      inner = inner.replace(/\\{search\\}/g, form)\n    } else {\n      inner = inner.replace(/\\{search\\}/g, \"\")\n    }\n\n    // Add table class\n\n    this.table.element.classList.add(options.classes.table)\n\n    // Pager\n\n    inner = inner.replace(\n      \"{pager}\",\n      \"<div class='\" + options.classes.pagination + \"'></div>\"\n    )\n\n    this.wrapper.innerHTML = inner\n\n    this.table.element.parentNode.replaceChild(this.wrapper, this.table.element)\n\n    let container = this.wrapper.querySelector(\".\" + options.classes.container)\n    container.appendChild(this.table.element)\n\n    this._updatePagination()\n    this._updateInfo()\n  }\n\n  async update(reloadData = true) {\n    var that = this\n\n    // no overlap please\n    if (this.currentPage > this.pager.getPages()) {\n      this.currentPage = this.pager.getPages()\n    }\n\n    let loading = that.wrapper.querySelector(\" .\" + that.config.classes.loading)\n    loading.classList.remove(\"hidden\")\n\n    // Create Header\n    this.table.header\n      .getCells()\n      .forEach(function (tableHeaderCell, columnIndex) {\n        let th = that.table.head.rows[0].cells[columnIndex]\n        th.innerHTML = tableHeaderCell.getInnerHTML()\n        if (tableHeaderCell.classes.length > 0) {\n          th.className = tableHeaderCell.classes.join(\" \")\n        }\n        for (let attr in tableHeaderCell.attributes) {\n          th.setAttribute(attr, tableHeaderCell.attributes[attr])\n        }\n        th.setAttribute(\"data-sortable\", tableHeaderCell.isSortable)\n      })\n\n    if (reloadData) {\n      // Change Table Body\n      return this.getPageData(this.currentPage)\n        .then(function (data) {\n          that.table.element.classList.remove(\"hidden\")\n          that.table.body.innerHTML = \"\"\n\n          data.forEach(function (row) {\n            that.table.body.appendChild(\n              row.getFormatted(\n                that.columnRenderers,\n                that.config.rowAttributesCreator\n              )\n            )\n          })\n\n          loading.classList.add(\"hidden\")\n        })\n        .then(function () {\n          // No Data\n          if (that.getDataCount() <= 0) {\n            that.wrapper.classList.remove(\"search-results\")\n            that.setMessage(that.config.labels.noRows)\n          }\n\n          that._emit(\"update\")\n        })\n        .then(function () {\n          that._updatePagination()\n          that._updateInfo()\n        })\n    }\n    // when there is a defer loading (server side) the initial data needs to be formatted\n    else {\n      that.table.element.classList.remove(\"hidden\")\n      that.table.body.innerHTML = \"\"\n\n      // No Data\n      if (this.getDataCount() <= 0) {\n        that.wrapper.classList.remove(\"search-results\")\n        that.setMessage(that.config.labels.noRows)\n      }\n\n      this._getData().forEach(function (row) {\n        that.table.body.appendChild(\n          row.getFormatted(\n            that.columnRenderers,\n            that.config.rowAttributesCreator\n          )\n        )\n      })\n      loading.classList.add(\"hidden\")\n    }\n  }\n\n  _updatePagination() {\n    // change Pagination\n    let pagination = this.wrapper.querySelector(\n      \" .\" + this.config.classes.pagination\n    )\n    pagination.innerHTML = \"\"\n    pagination.appendChild(this.pager.render(this.currentPage))\n  }\n\n  _updateInfo() {\n    // change info\n    let info = this.wrapper.querySelector(\" .\" + this.config.classes.info)\n\n    let infoString = this.isSearching\n      ? this.config.labels.infoFiltered\n      : this.config.labels.info\n    if (info && infoString.length) {\n      var string = infoString\n        .replace(\n          \"{start}\",\n          this.getDataCount() > 0 ? this._getPageStartIndex() + 1 : 0\n        )\n        .replace(\"{end}\", this._getPageEndIndex() + 1)\n        .replace(\"{page}\", this.currentPage)\n        .replace(\"{pages}\", this.pager.getPages())\n        .replace(\"{rows}\", this.getDataCount())\n        .replace(\"{rowsTotal}\", this.getDataCountTotal())\n\n      info.innerHTML = string\n    }\n  }\n\n  _getPageStartIndex() {\n    return (this.currentPage - 1) * this.config.perPage\n  }\n  _getPageEndIndex() {\n    let end = this.currentPage * this.config.perPage - 1\n    return end > this.getDataCount() - 1 ? this.getDataCount() - 1 : end\n  }\n\n  _getData() {\n    this._emit(\"getData\", this.table.dataRows)\n    return this.table.dataRows.filter(function (row) {\n      return row.visible\n    })\n  }\n\n  _fetchData() {\n    var that = this\n\n    let params = {\n      searchQuery: this.searchQuery,\n      sortColumn: this.sortColumn,\n      sortDirection: this.sortDirection,\n      start: this._getPageStartIndex(),\n      length: this.config.perPage,\n      datatable: 1,\n    }\n\n    params = Object.assign({}, this.config.ajaxParams, params)\n\n    let query = this.config.ajax + \"?\" + this._queryParams(params)\n\n    return fetch(query, {\n      method: \"GET\",\n      credentials: \"same-origin\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then(function (response) {\n        return response.json()\n      })\n      .then(function (json) {\n        that._emit(\"fetchData\", json)\n        that.filteredDataCount = json.recordsFiltered\n        return json.data\n      })\n      .then(function (data) {\n        let rows = []\n        // Create Table\n        data.forEach(function (dataRow) {\n          rows.push(JSTableRow.createFromData(dataRow))\n        })\n        return rows\n      })\n      .catch(function (error) {\n        console.error(error)\n      })\n  }\n\n  _queryParams(params) {\n    return Object.keys(params)\n      .map((k) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\n      .join(\"&\")\n  }\n\n  getDataCount() {\n    if (this.isSearching) {\n      return this.getDataCountFiltered()\n    }\n    return this.getDataCountTotal()\n  }\n\n  getDataCountFiltered() {\n    if (this.config.serverSide) {\n      return this.filteredDataCount\n    }\n    return this._getData().length\n  }\n\n  getDataCountTotal() {\n    if (this.config.serverSide) {\n      return this.config.deferLoading\n    }\n    return this.table.dataRows.length\n  }\n\n  getPageData() {\n    // return the ajax data with a promise\n    if (this.config.serverSide) {\n      return this._fetchData()\n    }\n\n    // filter the table data and return a promise\n    let start_idx = this._getPageStartIndex()\n    var end_idx = this._getPageEndIndex()\n    return Promise.resolve(this._getData()).then(function (data) {\n      return data.filter(function (row, idx) {\n        return idx >= start_idx && idx <= end_idx\n      })\n    })\n  }\n\n  async search(query) {\n    var that = this\n\n    this.searchQuery = query.toLowerCase()\n\n    // reset parameters\n    this.currentPage = 1\n    this.isSearching = true\n\n    // reset search\n    if (!this.searchQuery.length) {\n      // reset data to all table data\n      this.table.dataRows.forEach(function (row) {\n        row.visible = true\n      })\n      this.isSearching = false\n      that.wrapper.classList.remove(\"search-results\")\n      that.update()\n      return false\n    }\n\n    // search in all the data\n    if (!this.config.serverSide) {\n      this.table.dataRows.forEach(function (row) {\n        row.visible = false\n\n        var match = that.searchQuery.split(\" \").reduce(function (bool, word) {\n          var hasMatch = false\n\n          let cells = row.getCells()\n\n          // only use searchable cells\n          cells = cells.filter(function (cell, idx) {\n            if (that.columnsNotSearchable.indexOf(idx) < 0) {\n              return true\n            }\n          })\n\n          hasMatch = cells.some(function (cell, idx) {\n            if (cell.getTextContent().toLowerCase().indexOf(word) >= 0) {\n              return true\n            }\n          })\n\n          return bool && hasMatch\n        }, true)\n\n        if (match) {\n          row.visible = true\n        }\n      })\n    }\n    this.wrapper.classList.add(\"search-results\")\n\n    return this.update().then(function () {\n      that._emit(\"search\", query)\n    })\n  }\n\n  sort(column, direction, initial = false) {\n    var that = this\n    this.sortColumn = column || 0\n    this.sortDirection = direction\n\n    if (\n      this.sortColumn < 0 ||\n      this.sortColumn > this.table.getColumnCount() - 1\n    ) {\n      return false\n    }\n\n    var node = this.table.header.getCell(this.sortColumn)\n    var rows = this.table.dataRows\n\n    //Remove class from previus columns\n    let tableHeaderCells = this.table.header.getCells()\n    tableHeaderCells.forEach(function (tableHeaderCell) {\n      tableHeaderCell.removeClass(\"asc\")\n      tableHeaderCell.removeClass(\"desc\")\n    })\n\n    node.addClass(this.sortDirection)\n\n    if (!this.config.serverSide) {\n      rows = rows.sort(function (a, b) {\n        var ca = a.getCellTextContent(that.sortColumn).toLowerCase()\n        var cb = b.getCellTextContent(that.sortColumn).toLowerCase()\n\n        // replace $, coma, whitespace and %\n        ca = ca.replace(/(\\$|\\,|\\s|%)/g, \"\")\n        cb = cb.replace(/(\\$|\\,|\\s|%)/g, \"\")\n\n        ca = !isNaN(ca) && ca !== \"\" ? parseFloat(ca) : ca\n        cb = !isNaN(cb) && cb !== \"\" ? parseFloat(cb) : cb\n\n        // Sort empty cells or cells with different content types (numeric/not numeric) to top\n        if ((ca === \"\" && cb !== \"\") || (isNaN(ca) && !isNaN(cb))) {\n          return that.sortDirection === \"asc\" ? 1 : -1\n        }\n        if ((ca !== \"\" && cb === \"\") || (!isNaN(ca) && isNaN(cb))) {\n          return that.sortDirection === \"asc\" ? -1 : 1\n        }\n\n        // Otherwise\n        if (that.sortDirection === \"asc\") {\n          return ca === cb ? 0 : ca > cb ? 1 : -1\n        }\n        return ca === cb ? 0 : ca < cb ? 1 : -1\n      })\n\n      // replace dataRows with sorted rows\n      this.table.dataRows = rows\n    }\n\n    // initial sorting with serverSide on is not needed\n    if (!this.config.serverSide || !initial) {\n      this.update()\n    }\n\n    this._emit(\"sort\", this.sortColumn, this.sortDirection)\n  }\n\n  async paginate(new_page) {\n    var that = this\n\n    this.currentPage = new_page\n    return this.update().then(function () {\n      that._emit(\"paginate\", that.currentPage, new_page)\n    })\n  }\n\n  _bindEvents() {\n    var that = this\n\n    this.wrapper.addEventListener(\"click\", function (event) {\n      var node = event.target\n\n      if (node.hasAttribute(\"data-page\")) {\n        event.preventDefault()\n        let new_page = parseInt(node.getAttribute(\"data-page\"), 10)\n        that.paginate(new_page)\n\n        if (that.config.addQueryParams) {\n          const url = new URL(window.location.href)\n          url.searchParams.set(that.config.queryParams.page, new_page)\n          window.history.replaceState(null, null, url)\n        }\n      }\n\n      if (node.nodeName === \"TH\" && node.hasAttribute(\"data-sortable\")) {\n        if (node.getAttribute(\"data-sortable\") === \"false\") return false\n\n        event.preventDefault()\n        that.sort(\n          node.cellIndex,\n          node.classList.contains(\"asc\") ? \"desc\" : \"asc\"\n        )\n      }\n    })\n\n    if (this.config.perPageSelect) {\n      this.wrapper.addEventListener(\"change\", function (e) {\n        var node = e.target\n        if (\n          node.nodeName === \"SELECT\" &&\n          node.classList.contains(that.config.classes.selector)\n        ) {\n          e.preventDefault()\n          let value = parseInt(node.value, 10)\n          that._emit(\"perPageChange\", that.config.perPage, value)\n          that.config.perPage = value\n          that.update()\n        }\n      })\n    }\n\n    if (this.config.searchable) {\n      this.wrapper.addEventListener(\"keyup\", function (e) {\n        if (\n          e.target.nodeName === \"INPUT\" &&\n          e.target.classList.contains(that.config.classes.input)\n        ) {\n          e.preventDefault()\n          that.search(e.target.value)\n\n          if (that.config.addQueryParams) {\n            const url = new URL(window.location.href)\n            url.searchParams.set(that.config.queryParams.search, e.target.value)\n            window.history.replaceState(null, null, url)\n          }\n        }\n      })\n    }\n  }\n\n  on(event, callback) {\n    this.events = this.events || {}\n    this.events[event] = this.events[event] || []\n    this.events[event].push(callback)\n  }\n\n  off(event, callback) {\n    this.events = this.events || {}\n    if (event in this.events === false) return\n    this.events[event].splice(this.events[event].indexOf(callback), 1)\n  }\n\n  _emit(event) {\n    this.events = this.events || {}\n    if (event in this.events === false) return\n    for (var i = 0; i < this.events[event].length; i++) {\n      this.events[event][i].apply(\n        this,\n        Array.prototype.slice.call(arguments, 1)\n      )\n    }\n  }\n\n  setMessage(message) {\n    var colspan = this.table.getColumnCount()\n\n    var node = document.createElement(\"tr\")\n    node.innerHTML =\n      '<td class=\"' +\n      this.config.classes.message +\n      '\" colspan=\"' +\n      colspan +\n      '\">' +\n      message +\n      \"</td>\"\n\n    this.table.body.innerHTML = \"\"\n\n    this.table.body.appendChild(node)\n  }\n\n  _buildColumns() {\n    var that = this\n\n    /**\n     * change sortable attribute of columns:\n     * - a global definition of the sortable attribute of the table can be overwritten\n     *   by a \"data-sortable\" attribute on the table header or\n     *   by a custom column definitions attribute \"sortable\"\n     * - a custom column definitions attribute \"sortable\" can be overwritten\n     *   by a \"data-sortable\" attribute on the table header\n     * - a \"data-sortable\" attribute on the table header cannot be overwritten\n     *\n     * the initial sort column/direction can be defined on the table header (data-sort) or\n     * on the custom column definitions (attribute \"sort\") with possible values \"asc\"/\"desc\"\n     * - a custom column definitions attribute is overwritten by a \"data-sort\" attribute\n     * - since sorting is only supported for 1 column at the same time the last defined column is used\n     */\n\n    let initialSortColumn = null\n    let initialSortDirection = null\n\n    /**\n     * Process custom column definitions\n     */\n    if (this.config.columns) {\n      this.config.columns.forEach(function (columnsDefinition) {\n        // convert single column selection to array\n        if (!isNaN(columnsDefinition.select)) {\n          columnsDefinition.select = [columnsDefinition.select]\n        }\n\n        // Add the data attributes to the th elements\n        columnsDefinition.select.forEach(function (column) {\n          var tableHeaderCell = that.table.header.getCell(column)\n\n          // Skip missing\n          if (tableHeaderCell === undefined) {\n            return\n          }\n\n          /**\n           * Rendering\n           */\n          if (\n            columnsDefinition.hasOwnProperty(\"render\") &&\n            typeof columnsDefinition.render === \"function\"\n          ) {\n            that.columnRenderers[column] = columnsDefinition.render\n          }\n\n          /**\n           * Sortable\n           */\n          if (columnsDefinition.hasOwnProperty(\"sortable\")) {\n            let sortable = false\n            if (tableHeaderCell.hasSortable) {\n              sortable = tableHeaderCell.isSortable\n            } else {\n              sortable = columnsDefinition.sortable\n              tableHeaderCell.setSortable(sortable)\n            }\n\n            if (sortable) {\n              tableHeaderCell.addClass(that.config.classes.sorter)\n\n              // save sortable column/direction\n              // when there is one selected column in columns definition\n              // and this column should be sortable\n              if (\n                columnsDefinition.hasOwnProperty(\"sort\") &&\n                columnsDefinition.select.length === 1\n              ) {\n                initialSortColumn = columnsDefinition.select[0]\n                initialSortDirection = columnsDefinition.sort\n              }\n            }\n          }\n\n          /**\n           * Searchable (not serverside)\n           */\n          if (columnsDefinition.hasOwnProperty(\"searchable\")) {\n            tableHeaderCell.addAttribute(\n              \"data-searchable\",\n              columnsDefinition.searchable\n            )\n\n            if (columnsDefinition.searchable === false) {\n              that.columnsNotSearchable.push(column)\n            }\n          }\n        })\n      })\n    }\n\n    /**\n     * Process data-attributes\n     */\n    this.table.header\n      .getCells()\n      .forEach(function (tableHeaderCell, columnIndex) {\n        if (tableHeaderCell.isSortable === null) {\n          tableHeaderCell.setSortable(that.config.sortable)\n        }\n\n        if (tableHeaderCell.isSortable) {\n          tableHeaderCell.addClass(that.config.classes.sorter)\n\n          if (tableHeaderCell.hasSort) {\n            initialSortColumn = columnIndex\n            initialSortDirection = tableHeaderCell.sortDirection\n          }\n        }\n      })\n\n    // sort the table by the last column which is marked to be sorted\n    if (initialSortColumn !== null) {\n      that.sort(initialSortColumn, initialSortDirection, true)\n    }\n  }\n\n  // deep merge two objects\n  _merge(current, update) {\n    var that = this\n    Object.keys(current).forEach(function (key) {\n      if (\n        update.hasOwnProperty(key) &&\n        typeof update[key] === \"object\" &&\n        !(update[key] instanceof Array)\n      ) {\n        that._merge(current[key], update[key])\n      } else if (!update.hasOwnProperty(key)) {\n        update[key] = current[key]\n      }\n    })\n    return update\n  }\n\n  async _parseQueryParams() {\n    const urlParams = new URLSearchParams(window.location.search)\n\n    // parse search param and populate search\n    let search = urlParams.get(this.config.queryParams.search)\n    if (search) {\n      let searchfields = this.wrapper.querySelectorAll(\n        \".\" + this.config.classes.input\n      )\n      searchfields.forEach(function (searchfield) {\n        searchfield.value = search\n      })\n      await this.search(search)\n    }\n\n    // parse page param and navigate to page\n    let page = urlParams.get(this.config.queryParams.page)\n    if (page) {\n      await this.paginate(parseInt(page))\n    }\n  }\n}\n\nclass JSTableElement {\n  constructor(element) {\n    this.element = element\n\n    this.body = this.element.tBodies[0]\n    this.head = this.element.tHead\n\n    // we are modifying the data of the underlying element so first\n    // make a copy for row extraction\n    //let table = this.element.cloneNode(true);\n\n    // Process table rows\n    this.rows = Array.from(this.element.rows).map(function (row, rowID) {\n      return new JSTableRow(row, row.parentNode.nodeName, rowID)\n    })\n\n    this.dataRows = this._getBodyRows()\n    this.header = this._getHeaderRow()\n  }\n\n  _getBodyRows() {\n    return this.rows.filter(function (row) {\n      return !row.isHeader && !row.isFooter\n    })\n  }\n\n  _getHeaderRow() {\n    return this.rows.find(function (row) {\n      return row.isHeader\n    })\n  }\n\n  getColumnCount() {\n    return this.header.getColumnCount()\n  }\n\n  getFooterRow() {\n    return this.rows.find(function (row) {\n      return row.isFooter\n    })\n  }\n}\n\nclass JSTableRow {\n  constructor(element, parentName = \"\", rowID = null) {\n    // Process row cells\n    this.cells = Array.from(element.cells).map(function (cell) {\n      return new JSTableCell(cell)\n    })\n\n    this.d = this.cells.length\n\n    //this.element = element;\n    this.isHeader = parentName === \"THEAD\"\n    this.isFooter = parentName === \"TFOOT\"\n    this.visible = true\n    this.rowID = rowID\n\n    var that = this\n    // parse attributes\n    this.attributes = {}\n    ;[...element.attributes].forEach(function (attr) {\n      that.attributes[attr.name] = attr.value\n    })\n  }\n\n  getCells() {\n    return Array.from(this.cells)\n  }\n\n  getColumnCount() {\n    return this.cells.length\n  }\n\n  getCell(cell) {\n    return this.cells[cell]\n  }\n\n  // for sorting\n  getCellTextContent(cell) {\n    return this.getCell(cell).getTextContent()\n  }\n\n  static createFromData(data) {\n    let tr = document.createElement(\"tr\")\n\n    if (data.hasOwnProperty(\"data\")) {\n      if (data.hasOwnProperty(\"attributes\")) {\n        for (const attrName in data[\"attributes\"]) {\n          tr.setAttribute(attrName, data[\"attributes\"][attrName])\n        }\n      }\n      data = data[\"data\"]\n    }\n\n    data.forEach(function (cellData) {\n      let td = document.createElement(\"td\")\n      td.innerHTML =\n        !!cellData && cellData.hasOwnProperty(\"data\")\n          ? cellData[\"data\"]\n          : cellData\n\n      if (!!cellData && cellData.hasOwnProperty(\"attributes\")) {\n        for (const attrName in cellData[\"attributes\"]) {\n          td.setAttribute(attrName, cellData[\"attributes\"][attrName])\n        }\n      }\n      tr.appendChild(td)\n    })\n    return new JSTableRow(tr)\n  }\n\n  getFormatted(columnRenderers, rowAttributesCreator = null) {\n    let tr = document.createElement(\"tr\")\n    var that = this\n\n    for (let attr in this.attributes) {\n      tr.setAttribute(attr, this.attributes[attr])\n    }\n\n    let rowAttributes = !!rowAttributesCreator\n      ? rowAttributesCreator.call(this, this.getCells())\n      : {}\n    for (const attrName in rowAttributes) {\n      tr.setAttribute(attrName, rowAttributes[attrName])\n    }\n\n    this.getCells().forEach(function (cell, idx) {\n      var td = document.createElement(\"td\")\n      td.innerHTML = cell.getInnerHTML()\n      if (columnRenderers.hasOwnProperty(idx)) {\n        td.innerHTML = columnRenderers[idx].call(that, cell.getElement(), idx)\n      }\n      if (cell.classes.length > 0) {\n        td.className = cell.classes.join(\" \")\n      }\n      for (let attr in cell.attributes) {\n        td.setAttribute(attr, cell.attributes[attr])\n      }\n      tr.appendChild(td)\n    })\n    return tr\n  }\n\n  setCellClass(cell, className) {\n    this.cells[cell].addClass(className)\n  }\n}\n\nclass JSTableCell {\n  constructor(element) {\n    this.textContent = element.textContent\n    this.innerHTML = element.innerHTML\n    this.className = \"\"\n    this.element = element\n\n    this.hasSortable = element.hasAttribute(\"data-sortable\")\n    this.isSortable = this.hasSortable\n      ? element.getAttribute(\"data-sortable\") === \"true\"\n      : null\n\n    this.hasSort = element.hasAttribute(\"data-sort\")\n    this.sortDirection = element.getAttribute(\"data-sort\")\n\n    this.classes = []\n\n    var that = this\n    // parse attributes\n    this.attributes = {}\n    ;[...element.attributes].forEach(function (attr) {\n      that.attributes[attr.name] = attr.value\n    })\n  }\n\n  getElement() {\n    return this.element\n  }\n\n  // for sorting\n  getTextContent() {\n    return this.textContent\n  }\n\n  // for rendering\n  getInnerHTML() {\n    return this.innerHTML\n  }\n\n  setClass(className) {\n    this.className = className\n  }\n\n  setSortable(value) {\n    this.isSortable = value\n    //tableHeaderCell.setAttribute(\"data-sortable\", sortable);\n  }\n\n  addClass(value) {\n    this.classes.push(value)\n  }\n\n  removeClass(value) {\n    if (this.classes.indexOf(value) >= 0) {\n      this.classes.splice(this.classes.indexOf(value), 1)\n    }\n  }\n\n  addAttribute(key, value) {\n    this.attributes[key] = value\n  }\n}\n\nclass JSTablePager {\n  constructor(instance) {\n    this.instance = instance\n  }\n\n  getPages() {\n    let pages = Math.ceil(\n      this.instance.getDataCount() / this.instance.config.perPage\n    )\n    return pages === 0 ? 1 : pages\n  }\n\n  render() {\n    var options = this.instance.config\n    let pages = this.getPages()\n\n    let ul = document.createElement(\"ul\")\n    if (pages > 1) {\n      let prev =\n          this.instance.currentPage === 1 ? 1 : this.instance.currentPage - 1,\n        next =\n          this.instance.currentPage === pages\n            ? pages\n            : this.instance.currentPage + 1\n\n      // first button\n      if (options.firstLast) {\n        ul.appendChild(this.createItem(\"pager\", 1, options.firstText))\n      }\n\n      // prev button\n      if (options.nextPrev) {\n        ul.appendChild(this.createItem(\"pager\", prev, options.prevText))\n      }\n\n      var pager = this.truncate()\n      // append the links\n      pager.forEach(function (btn) {\n        ul.appendChild(btn)\n      })\n\n      // next button\n      if (options.nextPrev) {\n        ul.appendChild(this.createItem(\"pager\", next, options.nextText))\n      }\n\n      // first button\n      if (options.firstLast) {\n        ul.appendChild(this.createItem(\"pager\", pages, options.lastText))\n      }\n    }\n    return ul\n  }\n\n  createItem(className, pageNum, content, ellipsis) {\n    let item = document.createElement(\"li\")\n    item.className = className\n    item.innerHTML = !ellipsis\n      ? '<a href=\"#\" data-page=\"' + pageNum + '\">' + content + \"</a>\"\n      : \"<span>\" + content + \"</span>\"\n    return item\n  }\n\n  isValidPage(page) {\n    return page > 0 && page <= this.getPages()\n  }\n\n  truncate() {\n    var that = this,\n      options = that.instance.config,\n      delta = options.pagerDelta * 2,\n      currentPage = that.instance.currentPage,\n      left = currentPage - options.pagerDelta,\n      right = currentPage + options.pagerDelta,\n      totalPages = this.getPages(),\n      range = [],\n      pager = [],\n      lastIndex\n\n    if (!this.instance.config.truncatePager) {\n      for (let i = 1; i <= this.getPages(); i++) {\n        pager.push(this.createItem(i === currentPage ? \"active\" : \"\", i, i))\n      }\n    } else {\n      if (currentPage < 4 - options.pagerDelta + delta) {\n        right = 3 + delta\n      } else if (\n        currentPage >\n        this.getPages() - (3 - options.pagerDelta + delta)\n      ) {\n        left = this.getPages() - (2 + delta)\n      }\n\n      // Get the links that will be visible\n      for (var i = 1; i <= totalPages; i++) {\n        if (i === 1 || i === totalPages || (i >= left && i <= right)) {\n          range.push(i)\n        }\n      }\n\n      range.forEach(function (index) {\n        if (lastIndex) {\n          if (index - lastIndex == 2) {\n            pager.push(that.createItem(\"\", lastIndex + 1, lastIndex + 1))\n          } else if (index - lastIndex != 1) {\n            // Create ellipsis node\n            pager.push(\n              that.createItem(\n                options.classes.ellipsis,\n                0,\n                options.ellipsisText,\n                true\n              )\n            )\n          }\n        }\n\n        pager.push(\n          that.createItem(index == currentPage ? \"active\" : \"\", index, index)\n        )\n        lastIndex = index\n      })\n    }\n\n    return pager\n  }\n}\n","import { img, href, sleep } from \"~/src/js/appUtil\"\nimport { icon } from \"~/src/js/Icons\"\nimport { JSTable } from \"~/src/js/jstable\"\n\nconst status_el = document.getElementById(\"status\")\n\nconsole.log(`Environment: ${process.env.NODE_ENV}`)\n\nfunction user_thumbnail(id: number | string, img_url: string): string {\n  if (!(id && img_url)) return \"\"\n  const avatar = img(img_url, 40, 40, id)\n  return href(`/${id}`, avatar)\n}\n\nfunction ts_to_dt(ts: number, time = false): string {\n  if (!ts) {\n    return \"\"\n  }\n  const dt = new Date(1000 * ts)\n  return time ? dt.toLocaleString() : dt.toLocaleDateString()\n}\n\n// Field names\nconst ID = \"_id\",\n  LAST_LOGIN = \"ts\",\n  LOGIN_COUNT = \"#\",\n  LAST_INDEX_ACCESS = \"I\",\n  FIRSTNAME = \"f\",\n  LASTNAME = \"l\",\n  PROFILE = \"P\",\n  CITY = \"c\",\n  STATE = \"s\",\n  COUNTRY = \"C\",\n  PRIVATE = \"p\"\n\nconst HEADERS = [\"\", \"Name\", \"City\", \"Region\", \"Country\"]\nconst REQUIRED_FIELDS = [ID, FIRSTNAME, LASTNAME, PROFILE, CITY, STATE, COUNTRY]\nfunction makeRow(rowData) {\n  const [_id, firstname, lastname, profile, city, state, country] = rowData\n  return [\n    user_thumbnail(_id, profile),\n    `${firstname} ${lastname}`,\n    city,\n    state,\n    country,\n  ]\n}\n\nconst priv_icon = icon(\"eye-blocked\")\nconst pub_icon = icon(\"eye\")\nconst ADMIN_HEADERS = [\n  \"ID\",\n  icon(\"user-secret\"),\n  \"# Logins\",\n  \"LastLogin\",\n  \"IndexAccess\",\n  \"Name\",\n  \"City\",\n  \"Region\",\n  \"Country\",\n]\nconst ADMIN_REQUIRED_FIELDS = [\n  ID,\n  PROFILE,\n  CITY,\n  STATE,\n  COUNTRY,\n  FIRSTNAME,\n  LASTNAME,\n  LAST_LOGIN,\n  LOGIN_COUNT,\n  LAST_INDEX_ACCESS,\n  PRIVATE,\n]\nfunction makeAdminRow(rowData) {\n  const [\n    _id,\n    profile,\n    city,\n    state,\n    country,\n    firstname,\n    lastname,\n    last_login,\n    login_count,\n    last_index_access,\n    priv,\n  ] = rowData\n\n  // console.log(rowData)\n  const picon = priv ? priv_icon : pub_icon\n  return [\n    user_thumbnail(_id, profile),\n    picon,\n    login_count,\n    ts_to_dt(last_login),\n    ts_to_dt(last_index_access),\n    `${firstname} ${lastname}`,\n    city,\n    state,\n    country,\n  ]\n}\n\nasync function run() {\n  status_el.classList.add(\"spinner\")\n  console.time(\"maketable\")\n  const response = await fetch(url, { method: \"POST\" })\n  const data = await response.json()\n\n  const n_rows = data.length\n  const header_data = admin ? ADMIN_HEADERS : HEADERS\n  const headers = header_data.join(\"</th><th>\")\n  const thead_str = `<thead><th>${headers}</th></thead>\\n`\n\n  // The first row we get is field names\n  // which we will use to determine field ordering\n  const fields = data[0]\n  const field_pos = {}\n  for (let i = 0; i < fields.length; i++) {\n    field_pos[fields[i]] = i\n  }\n  const required_fields = admin ? ADMIN_REQUIRED_FIELDS : REQUIRED_FIELDS\n  const permutation = required_fields.map((f) => field_pos[f])\n\n  const rowFunc = admin ? makeAdminRow : makeRow\n  const row_strs = new Array(n_rows - 1)\n  for (let i = 1; i < n_rows; i++) {\n    const row = data[i]\n    const permuted_row = permutation.map((j) => row[j])\n    const cells = rowFunc(permuted_row).join(\"</td><td>\")\n    row_strs[i - 1] = `<tr><td>${cells}</td></tr>`\n  }\n  const rows_str = row_strs.join(\"\\n\")\n  const tbody_str = `<tbody>\\n${rows_str}\\n</tbody>`\n\n  const table_element: HTMLTableElement = document.getElementById(\"users\")\n  table_element.innerHTML = thead_str + tbody_str\n  console.timeEnd(\"maketable\")\n\n  const myTable = new JSTable(table_element, {\n    sortable: true,\n    searchable: true,\n    perPage: 12,\n  })\n  await sleep(0.2)\n  status_el.classList.remove(\"spinner\")\n}\n\n;(async () => {\n  try {\n    await run()\n  } catch (e) {\n    console.log(\"oops. \", e)\n  }\n})()\n","/*\n *   appUtil.js -- this is where we define constants and general utility functions\n *   that don't fit anywhere else.\n *\n *   importing it has no side-effects\n */\nexport function padNum(num: number, size: number): string {\n  let s = String(num)\n  while (s.length < (size || 2)) {\n    s = \"0\" + s\n  }\n  return s\n}\n\n// return a \"HH:MM:SS\" string given number of seconds\nexport function HHMMSS(secs: number): string {\n  let totalSeconds = secs\n\n  const hours = padNum(Math.floor(totalSeconds / 3600), 2)\n  totalSeconds %= 3600\n  const minutes = padNum(Math.floor(totalSeconds / 60), 2)\n  const seconds = padNum(Math.round(totalSeconds % 60), 2)\n\n  return `${hours}:${minutes}:${seconds}`\n}\n\n// return a \"DD:HH:MM\" string given number of seconds\nexport function DDHHMM(sec: number): string {\n  if (!sec || sec <= 0) {\n    return \"??\"\n  }\n  const days = Math.floor(sec / 86400)\n  sec -= days * 86400\n\n  // calculate (and subtract) whole hours\n  const hours = Math.floor(sec / 3600) % 24\n  sec -= hours * 3600\n\n  // calculate (and subtract) whole minutes\n  const minutes = Math.floor(sec / 60) % 60\n  sec -= minutes * 60\n\n  return `${padNum(days, 2)}:${padNum(hours, 2)}:${padNum(minutes, 2)}`\n}\n\n// return an image tag string, given an image url\nexport function img(url: string, w = 20, h = 20, alt = \"\"): string {\n  return `<img loading=lazy src='${url}' width=${w}px height=${h}px alt=\"${alt}\">`\n}\n\n// return an HTML href tag from a url and text\nexport function href(url: string, text: string): string {\n  return `<a href='${url}' target='_blank'>${text}</a>`\n}\n\n// define the do-nothing function, noop\nexport function noop(): void {\n  return\n}\n\n/**\n * Binary Search returns the index of the target value in a sorted array-like\n *    data structure.\n */\nexport function binarySearch(\n  get: (i: number) => unknown,\n  target: unknown,\n  start: number,\n  end: number,\n  compare?: (x, y) => number\n): number {\n  if (start > end) {\n    return false\n  }\n\n  const mid = Math.floor((start + end) / 2)\n\n  if (compare(get(mid), target) === 0) {\n    return mid\n  }\n\n  if (compare(get(mid), target) > 0) {\n    return binarySearch(get, target, start, mid - 1)\n  } else {\n    return binarySearch(get, target, mid + 1, end)\n  }\n}\n\n/**\n * Histogram for analysis\n * @example\n *  const bins = histogram([1,1,2,2,3,4,4,4], [2, 3])\n *\n * Then bins == [2, 3, 3]\n *\n */\nexport function histogram(points: Iterable<number>, bins: number[]): number[] {\n  const binCounts = new Array(bins.length + 1).fill(0)\n  const last = bins.length - 1\n  for (const p of points) {\n    if (p < bins[0]) {\n      binCounts[0]++\n    } else if (p > bins[last]) {\n      binCounts[bins.length]++\n    } else {\n      for (let i = 0; i < binCounts.length; i++) {\n        if (bins[i] <= p && p <= bins[i + 1]) {\n          binCounts[i]++\n          break\n        }\n      }\n    }\n  }\n  // console.log(bins)\n  return binCounts\n}\n\n/**\n * Filters outliers from an Array using standard IQR method. Creates a new Array.\n * adapted from https://gist.github.com/ogun/f19dc055e6b84d57e8186cbc9eaa8e45 (Kemal Ogun Isik)\n */\ntype quartObj = { q1: number; q3: number; iqr: number }\nexport function quartiles(someArray: Array<number>): quartObj {\n  if (someArray.length < 4) return\n\n  const values = someArray.slice().sort((a, b) => a - b)\n  const n = values.length\n  const n_4 = n / 4\n  const evenQuarters = n_4 % 1 === 0\n\n  const q1 = evenQuarters\n    ? (1 / 2) * (values[n_4] + values[n_4 + 1])\n    : values[Math.floor(n_4 + 1)]\n\n  const q3 = evenQuarters\n    ? (1 / 2) * (values[n * (3 / 4)] + values[n * (3 / 4) + 1])\n    : values[Math.ceil(n * (3 / 4) + 1)]\n\n  return { q1, q3, iqr: q3 - q1 }\n}\n\n/*\n * Some functions that make de-janking easier via async code\n */\nexport function sleep(t: number): Promise<number> {\n  return new Promise((resolve) => window.setTimeout(resolve, t))\n}\n\nexport function queueTask(cb: (x: unknown) => unknown): void {\n  window.setTimeout(cb, 0)\n}\n\nexport function nextTask(): Promise<void> {\n  return new Promise((resolve) => queueTask(resolve))\n}\n\nexport function nextAnimationFrame(): Promise<number> {\n  let resolve = null\n  const promise: Promise<number> = new Promise((r) => (resolve = r))\n  window.requestAnimationFrame(resolve)\n  return promise\n}\n\n/*\n *  An object for general rectangular bounds\n */\ntype BoundsData = [number, number, number, number]\ntype RectObj = { x: number; y: number; w: number; h: number }\nexport class Bounds {\n  _bounds: BoundsData\n\n  constructor() {\n    this._bounds = [NaN, NaN, NaN, NaN]\n    // [xmin, ymin, xmax, ymax]\n  }\n\n  reset(): Bounds {\n    this._bounds.fill(NaN)\n    return this\n  }\n\n  isEmpty(): boolean {\n    return isNaN(this._bounds[0])\n  }\n\n  update(x: number, y: number): Bounds {\n    if (this.isEmpty()) {\n      this._bounds[0] = this._bounds[2] = x\n      this._bounds[1] = this._bounds[3] = y\n      return\n    }\n    if (x < this._bounds[0]) this._bounds[0] = x\n    if (y < this._bounds[1]) this._bounds[1] = y\n    if (x > this._bounds[2]) this._bounds[2] = x\n    if (y > this._bounds[3]) this._bounds[3] = y\n    return this\n  }\n\n  updateBounds(otherBoundsObj: Bounds): Bounds {\n    const [x1, y1, x2, y2] = otherBoundsObj._bounds\n    this.update(x1, y1)\n    this.update(x2, y2)\n    return this\n  }\n\n  contains(x: number, y: number): boolean {\n    const [xmin, ymin, xmax, ymax] = this._bounds\n    return xmin <= x && x <= xmax && ymin <= y && y <= ymax\n  }\n\n  containsBounds(otherBoundsObj: Bounds): boolean {\n    const [x1, y1, x2, y2] = otherBoundsObj._bounds\n    return this.contains(x1, y1) && this.contains(x2, y2)\n  }\n\n  overlaps(otherBoundsObj: Bounds): boolean {\n    const [xmin, ymin, xmax, ymax] = this._bounds\n    const [x1, y1, x2, y2] = otherBoundsObj._bounds\n    return x2 >= xmin && x1 <= xmax && y2 >= ymin && y1 <= ymax\n  }\n\n  /**\n   * Euclidean distance between two bounds\n   */\n  dist(otherBoundsObj: Bounds): number {\n    const b = this._bounds\n    const o = otherBoundsObj._bounds\n    return Math.sqrt(\n      (b[0] - o[0]) ** 2 +\n        (b[1] - o[1]) ** 2 +\n        (b[2] - o[2]) ** 2 +\n        (b[3] - o[3]) ** 2\n    )\n  }\n\n  copyTo(otherBoundsObj: Bounds): void {\n    const b = this._bounds\n    const o = otherBoundsObj._bounds\n    o[0] = b[0]\n    o[1] = b[1]\n    o[2] = b[2]\n    o[3] = b[3]\n  }\n\n  get rect(): RectObj {\n    const [xmin, ymin, xmax, ymax] = this._bounds\n    return { x: xmin, y: ymin, w: xmax - xmin, h: ymax - ymin }\n  }\n\n  get data(): BoundsData {\n    return this._bounds\n  }\n\n  set data(data: BoundsData) {\n    this._bounds = data\n  }\n}\n"],"names":["$8a49238c792f3d7d$export$1ca1ec8b29a4ce27","name","cls","$2cefb615ecbfa5e4$var$JSTableDefaultConfig","perPage","perPageSelect","sortable","searchable","nextPrev","firstLast","prevText","nextText","firstText","lastText","ellipsisText","truncatePager","pagerDelta","classes","top","info","input","table","bottom","search","sorter","wrapper","dropdown","ellipsis","selector","container","pagination","loading","message","labels","placeholder","noRows","infoFiltered","layout","serverSide","deferLoading","ajax","ajaxParams","queryParams","page","addQueryParams","rowAttributesCreator","$2cefb615ecbfa5e4$export$589eb425755f05f4","_build","options","this","config","document","createElement","className","inner","join","replace","wrap","select","forEach","val","selected","option","Option","add","outerHTML","form","element","classList","innerHTML","parentNode","replaceChild","querySelector","appendChild","_updatePagination","_updateInfo","async","reloadData","that","currentPage","pager","getPages","remove","header","getCells","tableHeaderCell","columnIndex","th","head","rows","cells","getInnerHTML","length","attr","attributes","setAttribute","isSortable","getPageData","then","data","body","row","getFormatted","columnRenderers","getDataCount","setMessage","_emit","_getData","render","infoString","isSearching","string","_getPageStartIndex","_getPageEndIndex","getDataCountTotal","end","dataRows","filter","visible","_fetchData","params","searchQuery","sortColumn","sortDirection","start","datatable","Object","assign","query","_queryParams","fetch","method","credentials","headers","Accept","response","json","filteredDataCount","recordsFiltered","dataRow","push","$2cefb615ecbfa5e4$var$JSTableRow","createFromData","catch","error","console","keys","map","k","encodeURIComponent","getDataCountFiltered","start_idx","end_idx","Promise","resolve","idx","toLowerCase","split","reduce","bool","word","hasMatch","cell","columnsNotSearchable","indexOf","some","getTextContent","update","sort","column","direction","initial","getColumnCount","node","getCell","removeClass","addClass","a","b","ca","getCellTextContent","cb","isNaN","parseFloat","new_page","_bindEvents","addEventListener","event","target","hasAttribute","preventDefault","parseInt","getAttribute","paginate","url","URL","window","location","href","searchParams","set","history","replaceState","nodeName","cellIndex","contains","e","value","on","callback","events","off","splice","i","apply","Array","prototype","slice","call","arguments","colspan","_buildColumns","initialSortColumn","initialSortDirection","columns","columnsDefinition","undefined","hasOwnProperty","hasSortable","setSortable","addAttribute","hasSort","_merge","current","key","urlParams","URLSearchParams","get","querySelectorAll","searchfield","constructor","DOMElement","$2cefb615ecbfa5e4$var$JSTableElement","$2cefb615ecbfa5e4$var$JSTablePager","_parseQueryParams","_getBodyRows","isHeader","isFooter","_getHeaderRow","find","getFooterRow","tBodies","tHead","from","rowID","static","tr","attrName","cellData","td","attr1","rowAttributes","getElement","setCellClass","parentName","$2cefb615ecbfa5e4$var$JSTableCell","d","textContent","setClass","pages","Math","ceil","instance","ul","prev","next","createItem","truncate","btn","pageNum","content","item","isValidPage","lastIndex","delta","left","right","totalPages","range","i1","index","$b36b3391a1d6b43a$var$status_el","getElementById","$b36b3391a1d6b43a$var$user_thumbnail","id","img_url","text","$bc5bae31cbce43d7$export$8f51af5840e0602a","w","h","alt","$bc5bae31cbce43d7$export$463b44d9bf3628be","$b36b3391a1d6b43a$var$ts_to_dt","ts","time","dt","Date","toLocaleString","toLocaleDateString","log","$b36b3391a1d6b43a$var$HEADERS","$b36b3391a1d6b43a$var$REQUIRED_FIELDS","$b36b3391a1d6b43a$var$makeRow","rowData","_id","firstname","lastname","profile","city","state","country","$b36b3391a1d6b43a$var$priv_icon","$b36b3391a1d6b43a$var$pub_icon","$b36b3391a1d6b43a$var$ADMIN_HEADERS","$b36b3391a1d6b43a$var$ADMIN_REQUIRED_FIELDS","$b36b3391a1d6b43a$var$makeAdminRow","last_login","login_count","last_index_access","priv","picon","$b36b3391a1d6b43a$var$run","n_rows","thead_str","admin","fields","field_pos","permutation","f","rowFunc","row_strs","j","tbody_str","table_element","timeEnd","t","setTimeout"],"version":3,"file":"users-page.371df196.js.map"}